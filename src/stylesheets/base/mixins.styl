b($point)
  if $point == desktop
    @media (min-width: 1366px)
      {block}
  else if $point == laptop
    @media (max-width: 1365px)
      {block}
  else if $point == tablet
    @media (max-width: 1023px)
      {block}
  else if $point == phablet
    @media (min-width: 37.5em)
      {block}
  else if $point == mobile
    @media (max-width: 767px)
      {block}
  else if $point == mobile3x
    @media only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (min-resolution: 3dppx), only screen and (min-resolution: 350dpi)
      {block}

clearfix()
  &:after
    content: " "
    display: block
    clear: both

font-smoothing()
  -moz-osx-font-smoothing: grayscale
  -webkit-font-smoothing: antialiased

gradient(color1, color2 = lighten(color1, 40%), direction = top)
  background-color mix(color1, color2)
  background-image linear-gradient(direction, color2, color1)

input-placeholder()
  &::-webkit-input-placeholder
    {block}
  &:-moz-placeholder
    {block}
  &::-moz-placeholder
    {block}
  &:-ms-input-placeholder
    {block}

em( value, base = $baseFontSize )
  value = unit( value, "" )
  base = unit( base, "" )
  value / base * 1em

rem( value, base = $baseFontSize )
  value = unit( value, "" )
  base = unit( base, "" )
  value / base * 1rem

percent( value, total )
  value = unit( value, "" )
  total = unit( total, "" )
  value / total * 100%

font-face( name, font-src, weight = false, style = false, formats = eot woff2 woff truetype svg, svg-font-name = false )
  @font-face
    font-family: name
    if weight
      font-weight: weight
    if style
      font-style: style
    fonts = ()
    if eot in formats
      src: url( font-src + ".eot" )
      push( fonts, 'url("' + font-src + '.eot?#iefix") format("embedded-opentype")' )
    if woff2 in formats
      push( fonts, 'url("' + font-src + '.woff2") format("woff2")' )
    if woff in formats
      push( fonts, 'url("' + font-src + '.woff") format("woff")' )
    if opentype in formats || otf in formats
      push( fonts, 'url("' + font-src + '.otf") format("opentype")' )
    if truetype in formats || ttf in formats
      push( fonts, 'url("' + font-src + '.ttf") format("truetype")' )
    if svg in formats
      svg-name = svg-font-name ? svg-font-name : name
      push( fonts, 'url("' + font-src + '.svg#' + svg-name + '") format("svg")' )
    src: unquote( join( ", ", fonts ) )

button-gradient(color1, color2 = lighten(color1, 40%) )
  background-color mix(color1, color2)
  background linear-gradient(lighten(color1, 40%), 0%, color1 4%, color2 100%)
  border 1px solid darken(color2, 10%)
  &:hover
    background-color mix(color2, color1)
    background linear-gradient(lighten(color1, 20%), 0%, color2 4%, color1 100%)
  &:active
    background darken(mix(color1, color2), 10%)
    box-shadow inset 2px 2px 3px rgba(0,0,0,.75)

size($width, $height)
  width $width
  height $height

overflow-ellipsis()
  white-space nowrap
  overflow hidden
  text-overflow ellipsis


prevent-last-child-spacing(element="*", property="margin-right")
  if element is "*"
    element = unquote(element)
  & > {element}:last-child
    {property} 0

uppercase()
  text-transform uppercase

image-width(img)
  return image-size(img)[0]

image-height(img)
  return image-size(img)[1]

image-icon(image)
  position absolute
  display block
  content ''
  width image-width(image)
  height image-height(image)
  background eurl(image) no-repeat

image-icon-centered(image)
  position absolute
  display block
  content ''
  background eurl(image) no-repeat
  background-position 50% 50%
  
